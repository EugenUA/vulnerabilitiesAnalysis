package dao.SQLiteWorkingPackage;
import dao.DAOException;
import dao.db.SQLiteSingletonConnection;
import dao.interfaces.VulnerabilityDAO;
import entities.dbEntities.Vulnerability;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class SQLiteVulnerabilityDAO implements VulnerabilityDAO {

    private static final Logger logger = LogManager.getLogger(SQLiteVulnerabilityDAO.class);
    private Connection con = null;

    public SQLiteVulnerabilityDAO() throws DAOException {
        con = SQLiteSingletonConnection.getConnection();
        //logger.debug("Successfully connected to the database");
    }

    @Override
    public Vulnerability createVulnerability(Vulnerability vulnerability) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        try{
            PreparedStatement stmt = con.prepareStatement("" +
                    "INSERT INTO Vulnerability(name,cve,cvss,date,source,source_type) VALUES (?,?,?,?,?,?)");
            stmt.setString(1, vulnerability.getName());
            stmt.setString(2, vulnerability.getCve());
            stmt.setString(3, vulnerability.getCvss());
            stmt.setString(4, vulnerability.getDate());
            stmt.setString(4, vulnerability.getSource());
            stmt.setString(5, vulnerability.getSource_type().toString());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            rs.next();
            vulnerability.setId(rs.getInt(1));
            con.commit();
            rs.close();
            stmt.close();
        } catch(SQLException e){
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
        return vulnerability;
    }

    @Override
    public Vulnerability updateVulnerability(Vulnerability vulnerability) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        try{
            PreparedStatement stmt = con.prepareStatement("" +
                    "UPDATE Vulnerability SET name=?, cve=?, cvss=?, date=?, source=?, source_type=? WHERE id=?");
            stmt.setString(1, vulnerability.getName());
            stmt.setString(2, vulnerability.getCve());
            stmt.setString(3, vulnerability.getCvss());
            stmt.setString(4, vulnerability.getDate());
            stmt.setString(5, vulnerability.getSource());
            stmt.setString(6, vulnerability.getSource_type());
            stmt.setInt(2, vulnerability.getId());
            stmt.executeUpdate();
            con.commit();
            return vulnerability;
        } catch(SQLException e){
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
    }

    @Override
    public Vulnerability getVulnerabilityByName(String name) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        Vulnerability vulnerability = null;
        try{
            String sql = "SELECT * FROM Vulnerability WHERE name=?";
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setString(1, name);
            ResultSet rs = pstmt.executeQuery();
            while(rs.next()){
                int id = rs.getInt(1);
                String name1 = rs.getString(2);
                String cve = rs.getString(3);
                String cvss = rs.getString(4);
                String date = rs.getString(5);
                String source = rs.getString(6);
                String source_type = rs.getString(7);
                vulnerability = new Vulnerability(id, name1,cve,cvss,date,source,source_type);
            }
            rs.close();
            pstmt.close();
            return vulnerability;
        } catch (SQLException e) {
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
    }

    @Override
    public Vulnerability getVulnerabilityByCVE(String cve) throws DAOException{
        con = SQLiteSingletonConnection.reconnectIfConnectionToDatabaseLost();
        Vulnerability vulnerability = null;
        try{
            String sql = "SELECT * FROM Vulnerability WHERE cve=?";
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.setString(1, cve);
            ResultSet rs = pstmt.executeQuery();
            while(rs.next()){
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String cve1 = rs.getString(3);
                String cvss = rs.getString(4);
                String date = rs.getString(5);
                String source = rs.getString(6);
                String source_type = rs.getString(7);
                vulnerability = new Vulnerability(id, name,cve1,cvss,date,source,source_type);
            }
            rs.close();
            pstmt.close();
            return vulnerability;
        } catch (SQLException e) {
            logger.debug(e.getMessage());
            throw new DAOException(e.getMessage());
        }
    }

    @Override
    public List<Vulnerability> getVulnerabilityByDate(String date) throws DAOException{
        return null;
    }

    @Override
    public List<Vulnerability> getVulnerabilityBySource(String source) throws DAOException{
        return null;
    }

    @Override
    public List<Vulnerability> getVulnerabilityBySourceType(String source_type) throws DAOException{
        return null;
    }

}